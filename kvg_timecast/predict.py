import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import MODEL_PATH, ENCODERS_PATH, FEATURES_PATH
from model_training import KVGEnsembleModel
from prediction import KVGPredictor, create_sample_predictions


def load_trained_model():
    """Load the trained model and create predictor"""
    print("Loading trained model...")
    
    try:
        model, label_encoders = KVGEnsembleModel.load_model(
            MODEL_PATH, 
            ENCODERS_PATH, 
            FEATURES_PATH
        )
        
        predictor = KVGPredictor(
            model=model, 
            label_encoders=label_encoders,
            feature_names=model.feature_names,
            global_stats=model.global_stats
        )
        
        print(" Model & Predictor loaded successfully!")
        return predictor
        
    except Exception as e:
        print(f"Error loading model: {str(e)}")
        return None


def test_predictions(predictor):
    """Test the model with sample predictions. Generated by AI!"""
    print("\n Testing Model with Sample Predictions")
    print("=" * 50)
    
    # sample test cases
    test_cases = create_sample_predictions()
    
    for test in test_cases:
        try:
            result = predictor.predict_delay(**test['params'])
            
            print(f"\n {test['case']}:")
            print(f"    Predicted Delay: {result['predicted_delay']:.2f} minutes")
            
            if result['individual_predictions']:
                print(f"    Individual Models:")
                for model_name, pred in result['individual_predictions'].items():
                    if model_name != 'ensemble':
                        print(f"      â€¢ {model_name.replace('lgb_', '').title()}: {pred:.2f} min")
            
            ci = result['confidence_interval']
            print(f"   95% Confidence: [{ci['lower']:.2f}, {ci['upper']:.2f}] minutes")
            
        except Exception as e:
            print(f"Error predicting {test['case']}: {str(e)}")


def interactive_prediction(predictor):
    """Interactive prediction interface"""
    print("\nInteractive Prediction Mode")
    print("Enter trip details for delay prediction (or 'quit' to exit)")
    print("-" * 50)
    
    while True:
        try:
            print("\nEnter trip details:")
            
            # get user input
            stop_name = input("Stop name: ").strip()
            if stop_name.lower() == 'quit':
                break
                
            pattern_text = input("Route/Pattern (e.g., '11', '100'): ").strip()
            direction = input("Direction: ").strip()
            weekday = int(input("Weekday (0=Monday, 6=Sunday): "))
            month = int(input("Month (1-12): "))
            hour = int(input("Hour (0-23): "))
            minute = int(input("Minute (0-59): "))
            
            # optional historical data
            use_history = input("Add recent delay history? (y/n): ").strip().lower() == 'y'
            recent_delays = None
            
            if use_history:
                delays_input = input("Recent delays (comma-separated, e.g., '1.5,2.0,1.8'): ").strip()
                if delays_input:
                    recent_delays = [float(x.strip()) for x in delays_input.split(',')]
            
            result = predictor.predict_delay(
                stop_name=stop_name,
                pattern_text=pattern_text,
                direction=direction,
                weekday=weekday,
                month=month,
                hour=hour,
                minute=minute,
                recent_delays=recent_delays
            )
            
            print(f"\n Prediction Result:")
            print(f"   Predicted Delay: {result['predicted_delay']:.2f} minutes")
            ci = result['confidence_interval']
            print(f"   95% Confidence: [{ci['lower']:.2f}, {ci['upper']:.2f}] minutes")
            
        except KeyboardInterrupt:
            print("\n\nExiting...")
            break
        except Exception as e:
            print(f"Error: {str(e)}")
            print("Please try again with valid inputs.")


def main():
    """Main inference script"""
    print("KVG Time Series Prediction - Inference Mode")
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    predictor = load_trained_model()
    if predictor is None:
        print("Failed to load model. Please run train_model.py first.")
        return False
    
    test_predictions(predictor)
    
    try:
        interactive_prediction(predictor)
    except KeyboardInterrupt:
        print("\nExiting...")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
